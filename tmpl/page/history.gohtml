@{
	import (
		"strconv"

		m "1bwiki/model"

		"1bwiki/tmpl/layout/base"
		"1bwiki/tmpl/helper"
	)
	var u *m.User
	var niceTitle string
	var revs []*m.Revision
}

@section title {
	return niceTitle + ": Revision history"
}

@section user {
	@helper.User(u)
}

@raw(Nav(niceTitle, "history"))

<div class="ui text container">
	<h1>@niceTitle: Revision History</h1>

	@for i, v := range revs {
		@{
			lenDisplay := `<span class="minus">(` + strconv.Itoa(v.LenDiff) + `)</span>`
			if v.LenDiff > 0 {
				lenDisplay = `<span class="plus">(+` + strconv.Itoa(v.LenDiff) + `)</span>`
			}
			minor := ""
			if v.Minor {
				minor = `<span class="minoredit">m</span>`
			}
			cur := "cur"
			if i != 0 {
				cur = `<a href="/`+ v.PageTitle + `?oldid=` + strconv.FormatInt(v.ID, 10) + `&diff=` +
					strconv.FormatInt(revs[0].ID, 10) + `">cur</a>`
			}
			prev := "prev"
			nextRev := i + 1
			if nextRev < len(revs) {
				prev = `<a href="/`+ v.PageTitle + `?oldid=` + strconv.FormatInt(revs[nextRev].ID, 10) + `&diff=` +
					strconv.FormatInt(v.ID, 10) + `">prev</a>`
			}
		}
		<span>
			(@raw(cur) | @raw(prev)) <a href="/@v.PageTitle?oldid=@v.ID">@v.PrettyTime()</a> <a href="/User:@v.UserText">@v.UserText</a> (<a href="/User_Talk:@v.UserText">talk</a> | contribs) @raw(minor).. (@v.Len bytes) @raw(lenDisplay) .. (<i>@v.Comment</i>)<br>
		</span>
	}
</div>