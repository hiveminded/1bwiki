@{
	import (
		m "1bwiki/model"

		"1bwiki/tmpl/layout/base"
	)
	var pv *m.PageView
}

@if pv.Text == "" {
	<h1>Creating @pv.NiceTitle</h1>
} else {
	<h1>Editing @pv.NiceTitle</h1>
}


<form action="/save" method="post">
	<input type="hidden" name="namespace" value="@pv.NameSpace">
	<input type="hidden" name="title" value="@pv.Title">
	<input type="hidden" name="len" value="@len(pv.Text)">
	<div id="out"></div>
	<div id="in">
		<textarea id="code" name="text">@pv.Text</textarea>
	</div>
	<br>
	<br>
	<label>Edit Summary</label>
	<br>
	<input type="text" name="summary">
	<br>
	<button type="submit">Submit</button>
</form>
<script>
	// Because highlight.js is a bit awkward at times
    var languageOverrides = {
      js: 'javascript',
      html: 'xml'
    };

    emojify.setConfig({ img_dir: '/Static/emoji' });

    var md = markdownit({
      html: true,
      highlight: function(code, lang){
        if(languageOverrides[lang]) lang = languageOverrides[lang];
        if(lang && hljs.getLanguage(lang)){
          try {
            return hljs.highlight(lang, code).value;
          }catch(e){}
        }
        return '';
      }
    })
      .use(markdownitFootnote);

	function update(e){
      setOutput(e.getValue());
    }

    function setOutput(val){
      val = val.replace(/<equation>((.*?\n)*?.*?)<\/equation>/ig, function(a, b){
        return '<img src="http://latex.codecogs.com/png.latex?' + encodeURIComponent(b) + '" />';
      });

      var out = document.getElementById('out');
      var old = out.cloneNode(true);
      out.innerHTML = md.render(val);
      emojify.run(out);

      var allold = old.getElementsByTagName("*");
      if (allold === undefined) return;

      var allnew = out.getElementsByTagName("*");
      if (allnew === undefined) return;

      for (var i = 0, max = Math.min(allold.length, allnew.length); i < max; i++) {
        if (!allold[i].isEqualNode(allnew[i])) {
          out.scrollTop = allnew[i].offsetTop;
          return;
        }
      }
    }

	var editor = CodeMirror.fromTextArea(document.getElementById('code'), {
      mode: 'gfm',
      lineNumbers: false,
      matchBrackets: true,
      lineWrapping: true,
      theme: 'base16-light',
      extraKeys: {"Enter": "newlineAndIndentContinueMarkdownList"}
    });
	editor.on('change', update);
</script>