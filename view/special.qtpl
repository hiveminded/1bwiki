{% import (
        "strconv"
        "time"
		m "1bwiki/model"
	) %}
    
{% code
type UsersListPage struct {
    BasePage
    Users []*m.User
    URL string
    User *m.User
}
%}

{% func (p *UsersListPage) Body() %}
    <div class="ui text container">
	    <h1>Users</h1>
        <p>
            The following is a list of usernames currently in use.
        </p>
        {% for _, u := range p.Users %}
            {%code
                t := time.Unix(u.Registration, 0)
            %}
            <a href="/user/{%s u.Name %}">{%s u.Name %}</a> (<a href="/user/{%s u.Name %}/talk">talk</a>|<a href="/user/{%s u.Name %}/contribs">contribs</a>) (Created on {%v t.Format("_2 Jan 2006") %} at {%v t.Format("15:04:05") %})<br>
        {% endfor %}
    </div>
{% endfunc %}

{% func (p *UsersListPage) Title() %}
    Users
{% endfunc %}

{% func (p *UsersListPage) Nav() %}
    {%= p.BasePage.SpecialNav(p.URL) %}
{% endfunc %}

{% func (p *UsersListPage) UserMenu() %}
    {% if p.User.Anon %}
        {%= p.BasePage.UserMenu() %}
    {% else %}
        {%= p.BasePage.UserMenuLoggedIn(p.User) %}
    {% endif %}
{% endfunc %}

{% code
type DeletePage struct {
    BasePage
    URL string
    User *m.User
    PageTitle string
}
%}

{% func (p *DeletePage) Body() %}
    <div class="ui text container">
        <h1>Delete @pageTitle?</h1>
        <form class="ui form" method="post">
            <input type="hidden" name="title" value="@pageTitle">
            <button class="ui primary button" type="submit">Delete</button>
            <a class="ui button" href="/pages/@pageTitle">Cancel</a>
        </form>
    </div>
{% endfunc %}

{% func (p *DeletePage) Title() %}
    Delete {%s p.PageTitle %}
{% endfunc %}

{% func (p *DeletePage) Nav() %}
    {%= p.BasePage.SpecialNav(p.URL) %}
{% endfunc %}

{% func (p *DeletePage) UserMenu() %}
    {% if p.User.Anon %}
        {%= p.BasePage.UserMenu() %}
    {% else %}
        {%= p.BasePage.UserMenuLoggedIn(p.User) %}
    {% endif %}
{% endfunc %}

{% code
type RecentChangesPage struct {
    BasePage
    URL string
    User *m.User
    Revs []*m.Revision
    Limit int
}
%}

{% func (p *RecentChangesPage) Body() %}
    <div class="ui text container">
        <h1>Recent Changes</h1>

        <p>
            <h2>Recent Changes Options</h2>
            Show last
                {% if p.Limit == 50 %}
                    <a href="/special/recentchanges?limit=50" style="font-weight:bold;">50</a>
                {% else %}
                    <a href="/special/recentchanges?limit=50">50</a>
                {% endif %}
                |
                {% if p.Limit == 100 %}
                    <a href="/special/recentchanges?limit=100" style="font-weight:bold;">100</a>
                {% else %}
                    <a href="/special/recentchanges?limit=100">100</a>
                {% endif %}
                |
                {%if p.Limit == 250 %}
                    <a href="/special/recentchanges?limit=250" style="font-weight:bold;">250</a>
                {% else %}
                    <a href="/special/recentchanges?limit=250">250</a>
                {% endif %}
                |
                {%if p.Limit == 500 %}
                    <a href="/special/recentchanges?limit=500" style="font-weight:bold;">500</a>
                {% else %}
                    <a href="/special/recentchanges?limit=500">500</a>
                {% endif %}
                changes
        </p>

        {% code
            prevDate := ""
            showTime := true
        %}
        {% for _, v := range p.Revs %}
            {% code
                t := time.Unix(v.TimeStamp, 0).UTC()
                tOut := t.Format("15:04")

                dateHeader := t.Format("_2 Jan 2006")
                if prevDate ==  dateHeader {
                    showTime = false
                } else {
                    showTime = true
                    prevDate = dateHeader
                }

                lenDisplay := `<span class="minus">(` + strconv.Itoa(v.LenDiff) + `)</span>`
                if v.LenDiff > 0 {
                    lenDisplay = `<span class="plus">(+` + strconv.Itoa(v.LenDiff) + `)</span>`
                }

                minor := ""
                if v.Minor {
                    minor = `<abbr class="minoredit" title="This is a minor edit">m</abbr>`
                }

                newEdit := ""
                if v.ParentID == 0 {
                    newEdit = `<abbr class="newpage" title="This edit created a new page">N</abbr>`
                }
            %}
            {%if v.Deleted %}
                {%s v.UserText %} deleted page <a class="new" href="/pages/{%s v.PageTitle %}">{%s m.NiceTitle(v.PageTitle) %}</a><br>
            {% else %}
                {% if showTime %}
                    <h4>{%s prevDate %}</h4>
                {% endif %}
                {%s= minor %} {%s= newEdit %}
                {%s tOut %}<a href="/pages/{%s v.PageTitle %}">{%s m.NiceTitle(v.PageTitle) %}</a> (
                    {%if v.ParentID != 0 %}
                        <a href="/pages/{%s v.PageTitle %}?oldid={%v v.ParentID %}&amp;diff={%v v.ID %}">diff</a>
                    {% else %}
                        <span>diff</span>
                    {% endif %}
                    | <a href="/special/history?title={%s v.PageTitle %}">hist</a>)..{%s= lenDisplay %} ..<a href="/User:{%s v.UserText %}">{%s v.UserText %}</a> (<a href="/User_Talk:{s v.UserText %}">talk</a>|contribs) ({%s v.Comment %})<br>

            {% endif %}
        {% endfor %}
    </div>
{% endfunc %}

{% func (p *RecentChangesPage) Title() %}
    Recent Changes
{% endfunc %}

{% func (p *RecentChangesPage) Nav() %}
    {%= p.BasePage.SpecialNav(p.URL) %}
{% endfunc %}

{% func (p *RecentChangesPage) UserMenu() %}
    {% if p.User.Anon %}
        {%= p.BasePage.UserMenu() %}
    {% else %}
        {%= p.BasePage.UserMenuLoggedIn(p.User) %}
    {% endif %}
{% endfunc %}

{% code
type PageListPage struct {
    BasePage
    User *m.User
    URL string
    Pages []*m.View
}
%}

{% func (p *PageListPage) Body() %}
    <div class="ui text container">
        <h1>Pages</h1>

        {% for _, v := range p.Pages %}
            {% if !v.Deleted %}
                <span>
                    <a href="/pages/{%s v.Title %}">{%s v.NiceTitle %}</a><br>
                </span>
            {% endif %}
        {% endfor %}
    </div>
{% endfunc %}

{% func (p *PageListPage) Title() %}
    Pages
{% endfunc %}

{% func (p *PageListPage) Nav() %}
    {%= p.BasePage.SpecialNav(p.URL) %}
{% endfunc %}

{% func (p *PageListPage) UserMenu() %}
    {% if p.User.Anon %}
        {%= p.BasePage.UserMenu() %}
    {% else %}
        {%= p.BasePage.UserMenuLoggedIn(p.User) %}
    {% endif %}
{% endfunc %}